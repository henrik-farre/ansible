---
- name: Provision virtual machines
  tags: virtual_machines
  become: true
  block:
    - name: Packages
      community.general.pacman:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - virt-install
          - qemu-base
          - dnsmasq
          - cloud-utils
          - libvirt-python
          - python-lxml

    - name: Ensure libvirt-guest service is configured
      ansible.builtin.copy:
        dest: /etc/conf.d/libvirt-guests
        owner: root
        group: root
        mode: "0664"
        content: |
          # Managed by Ansible
          # Only start those VMs that are configured to autostart
          ON_BOOT=ignore
          # Perform shutdown on guests for kernel upgrades and more
          ON_SHUTDOWN=shutdown

    - name: Services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - libvirtd
        - libvirt-guests

    - name: Ensure module is loaded
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        owner: root
        group: root
        mode: "0664"
        content: |
          # Managed by Ansible
          # Needs to be loaded else sysctl can't change settings
          br_netfilter

    - name: Disabling netfilter for the bridge
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-netfilter-bridge.conf
        owner: root
        group: root
        mode: "0664"
        content: |
          # Managed by Ansible
          # Used by libvirt - disable firewall on bridge
          # https://linuxconfig.org/how-to-use-bridged-networking-with-libvirt-and-kvm
          # Disabling netfilter for the bridge
          net.bridge.bridge-nf-call-ip6tables = 0
          net.bridge.bridge-nf-call-iptables = 0
          net.bridge.bridge-nf-call-arptables = 0

    - name: Ensure delayed start systemd units exits
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/virsh-vm@.service
        mode: "0644"
        content: |
          [Unit]
          Description=Start and Stop Virtual Machine %i using virsh
          After=network.target

          [Service]
          Type=forking
          ExecStart=/usr/bin/virsh start %i
          ExecStop=/usr/bin/virsh shutdown %i
          ExecReload=/usr/bin/virsh reboot %i
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target

    - name: Ensure delayed start systemd timer exits
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/virsh-vm@.timer
        mode: "0644"
        content: |
          [Unit]
          Description=Timer to start Virtual Machine %i using virsh after 1 minute

          [Timer]
          OnBootSec=1min
          Unit=virsh-vm@%i.service

          [Install]
          WantedBy=timers.target

    - name: Ensure systemd is reloaded
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: List all VMs
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - name: List all running VMs
      community.libvirt.virt:
        command: list_vms
        state: running
      register: all_running_vms

    # TODO:
    # - https://wiki.archlinux.org/title/Libvirt#Access_virtual_machines_using_their_hostnames
    # - Huge pages: https://ubuntu.com/server/docs/virtualization-libvirt

    - name: Provision tasks
      ansible.builtin.include_tasks: provision.yml
      loop: "{{ groups['virtual_machines'] }}"
      loop_control:
        loop_var: virtual_machine_name
      when: hostvars[virtual_machine_name]['virtual_machine'] is defined
