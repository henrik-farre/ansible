---
- name: Ensure docker is installed and configured
  tags:
    - docker
  become: true
  block:
    - name: Install Docker-CE on Debian
      include_tasks: Debian.yml
      when: ansible_facts.distribution == "Debian"

    - name: Install Docker-CE on Archlinux
      include_tasks: Archlinux.yml
      when: ansible_facts.distribution == "Archlinux"

    - name: Ensure docker directory exists
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        owner: root
        group: docker
        mode: 0750

    - name: Ensure correct storage driver is configured
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: "{{ docker_daemon_options | to_nice_json }}"
        owner: root
        group: docker
        mode: 0640
      notify: Restart docker daemon

    - name: Check if devicemapper directory exist
      ansible.builtin.stat:
        path: /var/lib/docker/devicemapper
      register: docker_devicemapper

    - name: Ensure docker is stopped before removing devicemapper
      ansible.builtin.systemd:
        name: docker
        state: stopped
      when:
        - docker_devicemapper.stat.exists is defined and docker_devicemapper.stat.exists

    - name: Ensure devicemapper directory is removed
      ansible.builtin.file:
        path: /var/lib/docker/devicemapper
        state: absent
      when:
        - docker_devicemapper.stat.exists is defined and docker_devicemapper.stat.exists

    - name: Ensure docker is restarted
      ansible.builtin.meta: flush_handlers

    - name: Ensure docker is started
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes
      when:
        - docker_devicemapper.stat.exists is defined and docker_devicemapper.stat.exists

    - name: Remove old cronjob
      ansible.builtin.cron:
        state: absent
        name: "Clean docker"
        special_time: weekly
        job: "docker system prune -f"
        user: root
        cron_file: "docker_prune"

    - name: Prune unused docker images, containers and more | systemd service
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/docker-prune.service
        content: |
          [Unit]
          Description=Prune unused docker images, containers and more
          OnFailure=status-email@%n.service

          [Service]
          Type=oneshot
          ExecStart=/usr/bin/docker system prune -f
        owner: root
        mode: 0644

    - name: Prune unused docker images, containers and more | systemd timer
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/docker-prune.timer
        content: |
          [Unit]
          Description=Prune unused docker images, containers and more | Weekly job

          [Timer]
          OnCalendar=weekly
          Persistent=true

          [Install]
          WantedBy=timers.target
        owner: root
        mode: 0644

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable docker socket
      ansible.builtin.systemd:
        name: "docker.socket"
        enabled: yes
        state: started

    - name: Enable systemd services
      ansible.builtin.systemd:
        name: "docker-prune.service"
        enabled: yes

    - name: Enable systemd timers
      ansible.builtin.systemd:
        name: "docker-prune.timer"
        enabled: yes
        state: started

    - name: Ensure users are members of docker group
      ansible.builtin.user:
        name: "{{ item }}"
        groups: docker
        append: yes
      with_items:
        - "{{ groups_to_users.docker }}"
      when:
        - groups_to_users.docker is defined
