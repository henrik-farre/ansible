---
- name: Ensure tags are set on all tasks
  tags:
    - vim
  block:
    - name: Ensure Neovim and dependencies are installed
      become: yes
      pacman:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - neovim
          - python-neovim
          - python-psutil
          - python-pip
          - bash-language-server
      when: ansible_facts.distribution == 'Archlinux'

    - name: Ensure Neovim is installed
      become: yes
      apt:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - neovim
      when: ansible_facts.distribution == 'Debian'

    - name: Ensure dependencies for linter plugins are installed
      become: yes
      become_user: aur_builder
      aur:
        name: hadolint-bin
      when: ansible_facts.distribution == 'Archlinux'

    # groovy-language-server-git requires java-11-openjdk
    - name: Ensure Neovim language servers are installed
      become: yes
      pacman:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - bash-language-server
          - pyright
          - jdk11-openjdk
      when: ansible_facts.distribution == 'Archlinux'

    - name: Ensure correct Java version to install groovy-language-server-git
      become: yes
      command: "archlinux-java set java-11-openjdk"

    - name: Ensure Neovim language servers are installed (from AUR)
      become: yes
      become_user: aur_builder
      aur:
        name: "{{ packages }}"
      vars:
        packages:
          - ansible-language-server
          - vscode-langservers-extracted
          - dockerfile-language-server
          - terraform-ls
          - vim-language-server
          - yaml-language-server
          - groovy-language-server-git
      when: ansible_facts.distribution == 'Archlinux'

    - name: Clone neovim/vim files
      git:
        repo: git@github.com:henrik-farre/vimrc.git
        dest: "{{ ansible_user_dir }}/.config/nvim"
        version: master

    - name: Create backups and swaps dirs
      file:
        path: "{{ ansible_user_dir }}/.config/nvim/{{ item }}"
        owner: "{{ ansible_user_id }}"
        state: directory
        mode: 0700
      with_items:
        - backups
        - swaps

    - name: Ensure .local/share/applications exists
      file:
        path: "{{ ansible_user_dir }}/.local/share/applications"
        owner: "{{ ansible_user_id }}"
        state: directory
        mode: 0755

    - name: Install .desktop file
      copy:
        src: neovim.desktop
        dest: "{{ ansible_user_dir }}/.local/share/applications/neovim.desktop"
        owner: "{{ ansible_user_id }}"
        mode: 0644

    # https://github.com/mhinz/neovim-remote
    - name: Install neovim-remote
      pip:
        name: neovim-remote
        extra_args: --user
        executable: pip3
        state: latest
      when:
        - ansible_facts.distribution != "Debian"

    - name: Ensure python2 modules are installed on macos
      pip:
        name: neovim
        extra_args: --user
        executable: pip
        state: latest
      when:
        - ansible_os_family == "Darwin"

    - name: Ensure python3 modules are installed on macos
      pip:
        name: neovim
        extra_args: --user
        executable: pip3
        state: latest
      when:
        - ansible_os_family == "Darwin"

    # - name: Ensure python2 modules are removed on Archlinux
      # pip:
        # name: neovim
        # extra_args: --user
        # executable: pip
        # state: absent
      # when:
        # - ( ansible_distribution == "Archlinux" or ansible_distribution == "Arch Linux")

    # - name: Ensure python3 modules are removed on Archlinux
      # pip:
        # name: neovim
        # extra_args: --user
        # executable: pip3
        # state: absent
      # when:
        # - ( ansible_distribution == "Archlinux" or ansible_distribution == "Arch Linux")

    - name: Check if vim is installed
      stat:
        path: /usr/bin/vim
      register: vim_installation

    - name: Create .vimrc symlink for vim
      file:
        src: "{{ ansible_user_dir }}/.config/nvim/init.vim"
        dest: "{{ ansible_user_dir }}/.vimrc"
        state: link
      when: vim_installation.stat.exists

    - name: Create .vim symlink for vim
      file:
        src: "{{ ansible_user_dir }}/.config/nvim"
        dest: "{{ ansible_user_dir }}/.vim"
        state: link
      when: vim_installation.stat.exists
