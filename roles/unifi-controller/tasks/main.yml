---
- name: Ensure unifi controller is installed and configured
  become: true
  tags:
    - unifi-controller
  block:
    - name: Ensure needed directories exist
      ansible.builtin.file:
        path: "/srv/unifi-controller/{{ item }}"
        state: directory
        mode: 0775
        owner: root
        group: docker
      loop:
        - data
        - deploy/custom-cont-init.d
        - scripts
        - data/backup

    - name: Ensure docker-compose.yml exists for unifi
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: /srv/unifi-controller/deploy/docker-compose.yml
        mode: 0664
        owner: root
        group: docker

    - name: Deploy Docker Compose stack
      community.docker.docker_compose:
        project_name: unifi-controller
        project_src: /srv/unifi-controller/deploy

    # Requires manual restore of backup
    - name: Wait until the file default site is present before continuing
      ansible.builtin.wait_for:
        path: /srv/unifi-controller/data/config/data/sites/default

    # TODO: owner/group
    # https://help.ubnt.com/hc/en-us/articles/215458888-UniFi-How-to-further-customize-USG-configuration-with-config-gateway-json
    - name: Ensure custom config.gateway.json is deployed
      ansible.builtin.template:
        src: "config.gateway.json.j2"
        dest: /srv/unifi-controller/data/config/data/sites/default/config.gateway.json
        owner: 911
        group: 911
        mode: 0600

    # https://help.ui.com/hc/en-us/articles/205146040-UniFi-Explaining-the-config-properties-File
    # - Disable analytics
    # Note: remember to force provision devices for changes to apply
    - name: Ensure custom config.properties is deployed
      ansible.builtin.copy:
        content: |
          config.system_cfg.1=system.analytics.anonymous=disabled
        dest: /srv/unifi-controller/data/config/data/sites/default/config.properties
        owner: 911
        group: 911
        mode: 0600

    # From https://help.ui.com/hc/en-us/articles/204911424-UniFi-How-to-remove-prune-older-data-and-adjust-mongo-database-size
    # looks like it has moved to https://help.ui.com/hc/en-us/articles/360006634094-UniFi-Repairing-Database-Issues-on-the-UniFi-Network-Application#3
    # and script is now called https://help.ui.com/hc/en-us/article_attachments/360008640574/CK_repair.js
    - name: MongoDB maintenance prune script
      ansible.builtin.copy:
        dest: /srv/unifi-controller/data/config/mongo_prune_js.js
        src: root/mongo_prune_js.js
        owner: root
        mode: 0644

    # Script is run inside Docker
    - name: MongoDB maintenance script
      ansible.builtin.copy:
        dest: /srv/unifi-controller/data/config/mongodb_maintenance.sh
        content: |
          #!/bin/bash
          /usr/bin/mongo --port 27117 < /config/mongo_prune_js.js
        owner: root
        mode: 0750

    - name: MongoDB maintenance service
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/mongodb_maintenance.service
        content: |
          [Unit]
          Description=MongoDB maintenance
          OnFailure=status-email@%n.service

          [Service]
          Type=oneshot
          ExecStart=/usr/bin/docker exec unifi-controller /config/mongodb_maintenance.sh
        owner: root
        mode: 0644

    - name: MongoDB maintenance timer
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/mongodb_maintenance.timer
        content: |
          [Unit]
          Description=MongoDB maintenance

          [Timer]
          OnCalendar=monthly
          Persistent=True

          [Install]
          WantedBy=timers.target
        owner: root
        mode: 0644

    - name: Ensure mongodump is installed inside container
      ansible.builtin.copy:
        dest: /srv/unifi-controller/deploy/custom-cont-init.d/mongodump-install.sh
        content: |
          #!/bin/bash
          apt update
          apt install -y mongo-tools
        mode: 0750

    # Script is run inside Docker
    - name: MongoDB dump script
      ansible.builtin.copy:
        dest: /srv/unifi-controller/data/config/mongodb_dump.sh
        content: |
          #!/bin/bash
          /usr/bin/mongodump --port 27117 --out=/backup/mongodump/
        owner: root
        mode: 0750

    - name: Install unifi-controller backup script
      ansible.builtin.copy:
        dest: /srv/unifi-controller/scripts/backup-unifi-controller.sh
        content: |
          #!/bin/bash
          set -o nounset
          set -o errexit
          set -o pipefail

          BACKUP_LOCATION=/shared/backup/unifi-controller/$(date +"%Y-%m-%d")

          mkdir -p "$BACKUP_LOCATION"

          rm -rvf --preserve-root=all "/srv/unifi-controller/data/backup/mongodump"
          mkdir -p "/srv/unifi-controller/data/backup/mongodump"
          /usr/bin/docker exec unifi-controller /config/mongodb_dump.sh

          /usr/bin/tar Jcvf ${BACKUP_LOCATION}/mongodump.tar.xz /srv/unifi-controller/data/backup/mongodump
          # DB files might change while backup is running and cause tar to return an error
          /usr/bin/tar Jcvf ${BACKUP_LOCATION}/config.tar.xz /srv/unifi-controller/data/config || true
        mode: 0750

    - name: Install systemd services for backup
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/backup-unifi-controller.service
        content: |
          [Unit]
          Description=Backup unifi-controller
          OnFailure=status-email@%n.service

          [Service]
          WorkingDirectory=/srv/unifi-controller/deploy

          Type=oneshot
          ExecStart=/srv/unifi-controller/scripts/backup-unifi-controller.sh
        owner: root
        mode: 0644

    - name: Install systemd timers
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/backup-unifi-controller.timer
        content: |
          [Unit]
          Description=Backup unifi-controller
          After=network-online.target
          Wants=network-online.target

          [Timer]
          OnCalendar=daily
          Persistent=True

          [Install]
          WantedBy=timers.target
        owner: root
        mode: 0644

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable systemd timers
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - mongodb_maintenance.timer
        - backup-unifi-controller.timer
