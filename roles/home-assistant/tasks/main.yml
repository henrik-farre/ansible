---
- name: Ensure home assistant is installed and configured
  become: true
  tags:
    - home-assistant
  block:
    - name: Ensure vaulted vars are loaded
      ansible.builtin.include_vars:
        file: homeassistant.yml.vault

    - name: Merge override settings if they exists
      ansible.builtin.set_fact:
        homeassistant: "{{ homeassistant | combine(homeassistant_overrides, recursive=True) }}"
      when: homeassistant_overrides is defined

    - name: Ensure bluetooth is configured
      ansible.builtin.include_role:
        name: bluetooth

    - name: Ensure custom ports are configured
      community.general.ufw:
        rule: "allow"
        port: "8123"
        proto: "tcp"
        comment: "Home Assistant"

    - name: Ensure needed directories exist
      ansible.builtin.file:
        path: "/srv/home-assistant/{{ item.path }}"
        state: directory
        mode: "0775"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      loop:
        - path: data/home-assistant/config
          owner: root
          group: docker
        - path: data/home-assistant/media
          owner: root
          group: docker
        - path: data/home-assistant/config/custom_components/hacs
          owner: root
          group: root
        - path: data/mariadb/mysql
          owner: 999
          group: 999
        - path: data/mariadb/entrypoint
          owner: root
          group: docker
        - path: data/mosquitto/config
          owner: 1883
          group: 1883
        - path: data/mosquitto/data
          owner: 1883
          group: 1883
        - path: data/mosquitto/log
          owner: 1883
          group: 1883
        - path: data/zigbee2mqtt
          owner: root
          group: docker
        - path: data/whisper
          owner: root
          group: docker
        - path: data/piper
          owner: root
          group: docker
        - path: deploy
          owner: root
          group: docker
        - path: scripts
          owner: root
          group: docker

    - name: Ensure mosquitto is configured
      ansible.builtin.copy:
        dest: /srv/home-assistant/data/mosquitto/config/mosquitto.conf
        content: |
          listener 1883
          persistence true
          persistence_location /mosquitto/data

          log_dest stdout

          ## Authentication ##
          allow_anonymous false
          password_file /mosquitto/config/password_file
        mode: "0664"
        owner: 1883
        group: 1883

    - name: Ensure mosquitto has password_file
      ansible.builtin.template:
        dest: /srv/home-assistant/data/mosquitto/config/password_file
        src: mosquitto_password_file.j2
        mode: "0400"
        owner: 1883
        group: 1883

    - name: Check if zigbee2mqtt config exists
      ansible.builtin.stat:
        path: /srv/home-assistant/data/zigbee2mqtt/configuration.yaml
        get_checksum: false
      register: zigbee2mqtt_config

    # Zigbee2mqtt writes to its own config file and removes the ansible block markers
    - name: Ensure zigbee2mqtt is configured
      ansible.builtin.copy:
        dest: /srv/home-assistant/data/zigbee2mqtt/configuration.yaml
        content: |
          ---
          permit_join: true
          mqtt:
            base_topic: zigbee2mqtt
            server: mqtt://mosquitto
            user: {{ homeassistant.mosquitto.user }}
            password: {{ homeassistant.mosquitto.password }}
          {# Current hardcoded to first device #}
          {% if homeassistant.zigbee2mqtt.devices %}
          serial:
            adapter: ezsp
            port: >-
              {{ homeassistant.zigbee2mqtt.devices[0] }}
          {% endif %}
          frontend:
            port: 8080
          homeassistant: true
          advanced:
            log_level: warn
        mode: "0664"
        owner: 1883
        group: docker
      when:
        - zigbee2mqtt_config.stat.exists is defined and not zigbee2mqtt_config.stat.exists

    - name: Ensure scrape config for Home Assistant exists
      ansible.builtin.template:
        src: victoriametrics/prometheus/homeassistant.yml.j2
        dest: /srv/monitoring/data/victoriametrics/prometheus/conf.d/homeassistant.yml
        mode: "0664"
        owner: root
        group: docker

    - name: Ensure docker-compose.yml exists for home assistant
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: /srv/home-assistant/deploy/docker-compose.yml
        mode: "0664"
        owner: root
        group: docker

    - name: Deploy Docker Compose stack
      community.docker.docker_compose_v2:
        project_name: home-assistant
        project_src: /srv/home-assistant/deploy

    - name: Custom traefik config
      ansible.builtin.template:
        src: traefik/home-assistant.yml.j2
        dest: /srv/traefik/data/dynamic/home-assistant.yml
        mode: "0664"
        owner: root
        group: docker

    - name: Wait until the file home assistant config exists is present before continuing
      ansible.builtin.wait_for:
        path: /srv/home-assistant/data/home-assistant/config/configuration.yaml

    - name: Ensure external db is used for recorder
      ansible.builtin.blockinfile:
        path: /srv/home-assistant/data/home-assistant/config/configuration.yaml
        marker: "# {mark} ANSIBLE MANAGED BLOCK recorder"
        owner: root
        group: docker
        mode: "0660"
        block: |
          recorder:
            # https://www.home-assistant.io/integrations/recorder/
            # Connecting using shared socket in volume
            db_url: mysql://{{ homeassistant.db.user }}:{{ homeassistant.db.password }}@localhost/{{ homeassistant.db.database }}?unix_socket=/var/run/mysqld/mysqld.sock&charset=utf8mb4
      notify: Restart home-assistant container

    - name: Get infos on network
      community.docker.docker_network_info:
        name: traefik
      register: traefik_network

    - name: Ensure http is configured
      ansible.builtin.blockinfile:
        path: /srv/home-assistant/data/home-assistant/config/configuration.yaml
        marker: "# {mark} ANSIBLE MANAGED BLOCK http"
        block: |
          # https://www.home-assistant.io/integrations/http/
          http:
            ip_ban_enabled: true
            login_attempts_threshold: 5
            use_x_forwarded_for: true
            trusted_proxies:
              - 192.168.0.0/24
              - 172.17.0.0/24
              - {{ traefik_network.network.IPAM.Config[0].Subnet }}
              - 127.0.0.1
              - ::1
              - fe80::/64
              - fe00::/64
              - fd00::/64
      notify: Restart home-assistant container

    - name: Ensure bluetooth is enabled
      ansible.builtin.blockinfile:
        path: /srv/home-assistant/data/home-assistant/config/configuration.yaml
        marker: "# {mark} ANSIBLE MANAGED BLOCK bluetooth"
        block: |
          # https://www.home-assistant.io/integrations/bluetooth/
          bluetooth:
      notify: Restart home-assistant container

    - name: Ensure prometheus is enabled
      ansible.builtin.blockinfile:
        path: /srv/home-assistant/data/home-assistant/config/configuration.yaml
        marker: "# {mark} ANSIBLE MANAGED BLOCK prometheus"
        block: |
          # https://www.home-assistant.io/integrations/prometheus
          prometheus:
      notify: Restart home-assistant container

    - name: Check existing HACS installation
      ansible.builtin.stat:
        path: /srv/home-assistant/data/home-assistant/config/custom_components/hacs/manifest.json
      register: hacs_install

    - name: Find latest release of HACS
      ansible.builtin.uri:
        url: https://api.github.com/repos/hacs/integration/releases/latest
        return_content: true
      register: json_response
      when:
        - hacs_install.stat.exists is defined and not hacs_install.stat.exists

    - name: Ensure HACS is installed and enabled
      ansible.builtin.unarchive:
        src: "{{ item.browser_download_url }}"
        dest: /srv/home-assistant/data/home-assistant/config/custom_components/hacs
        remote_src: true
      notify: Restart home-assistant container
      loop: "{{ json_response.json.assets }}"
      when:
        - hacs_install.stat.exists is defined and not hacs_install.stat.exists
        - item.name == 'hacs.zip'

    - name: Install home-assistant backup script
      ansible.builtin.copy:
        dest: /srv/home-assistant/scripts/backup-home-assistant.sh
        content: |
          #!/bin/bash
          set -o nounset
          set -o errexit
          set -o pipefail

          BACKUP_LOCATION=/shared/backup/home-assistant/$(date +"%Y-%m-%d")
          BACKUP_MARIADB_LOCATION="$BACKUP_LOCATION/mariadb"

          mkdir -p "$BACKUP_LOCATION"
          mkdir -p "$BACKUP_MARIADB_LOCATION"

          chown 999:adm "$BACKUP_MARIADB_LOCATION"

          docker run --rm --name ha-mariadb-backup --user mysql \
            -v "${BACKUP_MARIADB_LOCATION}":/backup \
            -v /srv/home-assistant/data/mariadb/mysql/:/var/lib/mysql \
            -v home-assistant_mariadb-socket:/var/run/mysqld \
            {{ containers.ha_mariadb.repo }}:{{ containers.ha_mariadb.tag }} \
            mariabackup --backup --target-dir=/backup -u root -p "{{ homeassistant.db.root_password }}"

          /usr/bin/tar zcvf ${BACKUP_LOCATION}/mariadb.tar.gz "${BACKUP_MARIADB_LOCATION}"

          rm -rvf --preserve-root=all "${BACKUP_MARIADB_LOCATION}"

          for service in home-assistant mosquitto zigbee2mqtt; do
            /usr/bin/tar zcvf ${BACKUP_LOCATION}/${service}.tar.gz /srv/home-assistant/data/${service}
          done
        mode: "0750"

    - name: Install systemd services for backup
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/backup-home-assistant.service
        content: |
          [Unit]
          Description=Backup home-assistant
          OnFailure=status-email@%n.service

          [Service]
          WorkingDirectory=/srv/home-assistant/deploy

          Type=oneshot
          ExecStart=/srv/home-assistant/scripts/backup-home-assistant.sh
        owner: root
        mode: "0644"

    - name: Install systemd timers
      ansible.builtin.copy:
        dest: /usr/local/lib/systemd/system/backup-home-assistant.timer
        content: |
          [Unit]
          Description=Backup home-assistant
          After=network-online.target
          Wants=network-online.target

          [Timer]
          OnCalendar=daily
          Persistent=True

          [Install]
          WantedBy=timers.target
        owner: root
        mode: "0644"

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable systemd services
      ansible.builtin.systemd:
        name: "backup-home-assistant.service"
        enabled: true

    - name: Enable systemd timers
      ansible.builtin.systemd:
        name: "backup-home-assistant.timer"
        enabled: true
        state: started
